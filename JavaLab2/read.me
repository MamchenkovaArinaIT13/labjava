 
ОТЧЕТ ПО ЛАБОРАТОРНОЙ РАБОТЕ №2 ПО JAVA

ОБЩЕЕ ОПИСАНИЕ РАБОТЫ
Программа представляет собой консольное приложение с меню для выполнения 6 задач по объектно-ориентированному программированию. Приложение поддерживает два режима ввода данных: ручной ввод пользователем и автоматический ввод с готовыми данными.

СТРУКТУРА ЛАБОРАТОРНОЙ РАБОТЫ

1. MenuSystem - основной класс с логикой меню и валидации ввода
2. Name - класс для работы с именами
3. House - класс для представления дома
4. Employee - класс для представления сотрудника
5. Departament - класс для представления отдела
6. Fraction - класс для работы с дробями
7. Main - точка входа в программу

ТЕСТИРОВАНИЕ ЗАДАЧ

1. КАТЕГОРИЯ №1: Задача 3 - Класс Name

ОПИСАНИЕ КЛАССА:
Класс Name представляет сущность "Имя" с поддержкой различных комбинаций параметров (фамилия, имя, отчество). Класс обеспечивает хранение и обработку персональных данных.

ПОЛЯ КЛАССА:

· private String firstName - имя человека
· private String lastName - фамилия человека
· private String middleName - отчество человека

КОНСТРУКТОРЫ:

Name(String name)

· Описание: Конструктор с одним параметром. Создает объект Name только с именем.
· Параметры: name - имя человека

Name(String lastName, String firstName)

· Описание: Конструктор с двумя параметрами. Создает объект Name с фамилией и именем.
· Параметры: lastName - фамилия человека, firstName - имя человека

Name(String lastName, String firstName, String middleName)

· Описание: Конструктор с тремя параметрами. Создает объект Name с фамилией, именем и отчеством.
· Параметры: lastName - фамилия человека, firstName - имя человека, middleName - отчество человека

МЕТОДЫ ДОСТУПА (ГЕТТЕРЫ):

String getFirstName()

· Описание: Возвращает имя человека.
· Параметры: нет

String getLastName()

· Описание: Возвращает фамилию человека.
· Параметры: нет

String getMiddleName()

· Описание: Возвращает отчество человека.
· Параметры: нет

МЕТОДЫ ИЗМЕНЕНИЯ (СЕТТЕРЫ):

void setFirstName(String firstName)

· Описание: Устанавливает имя человека.
· Параметры: firstName - новое имя

void setLastName(String lastName)

· Описание: Устанавливает фамилию человека.
· Параметры: lastName - новая фамилия

void setMiddleName(String middleName)

· Описание: Устанавливает отчество человека.
· Параметры: middleName - новое отчество

МЕТОДЫ ПРЕДСТАВЛЕНИЯ:

String toString()

· Описание: Возвращает строковое представление объекта в формате "Фамилия Имя Отчество". Если какие-то компоненты отсутствуют, они пропускаются.
· Параметры: нет

String toStringNow()

· Описание: Возвращает альтернативное строковое представление объекта в формате "Имя Отчество Фамилия". Если какие-то компоненты отсутствуют, они пропускаются.
· Параметры: нет

ТЕСТИРОВАНИЕ (автоматический ввод):

· Клеопатра: "Клеопатра"
· Пушкин Александр Сергеевич: "Пушкин Александр Сергеевич"
· Маяковский Владимир: "Маяковский Владимир"

ТЕСТИРОВАНИЕ (ручной ввод):
Входные параметры: только имя "Мария"
Результат: "Мария"

Входные параметры: фамилия "Иванов", имя "Иван", отчество "Иванович"
Результат: "Иванов Иван Иванович"


2. КАТЕГОРИЯ №2: Задача 5 - Класс House

ОПИСАНИЕ КЛАССА:
Класс House представляет сущность "Дом" с количеством этажей. Обеспечивает корректное склонение слова "этаж" в зависимости от числа.

ПОЛЯ КЛАССА:

· private int floors - количество этажей в доме

КОНСТРУКТОРЫ:

House(int floors)

· Описание: Конструктор с параметром количества этажей. Создает объект House с указанным количеством этажей.
· Параметры: floors - количество этажей

МЕТОДЫ ДОСТУПА (ГЕТТЕРЫ):

int getFloors()

· Описание: Возвращает количество этажей в доме.
· Параметры: нет

МЕТОДЫ ИЗМЕНЕНИЯ (СЕТТЕРЫ):

void setFloors(int floors)

· Описание: Устанавливает количество этажей в доме. Включает проверку корректности значения.
· Параметры: floors - новое количество этажей

МЕТОД ПРЕДСТАВЛЕНИЯ:

String toString()

· Описание: Возвращает строковое представление объекта с корректным склонением слова "этаж". Проверяет корректность количества этажей.
· Параметры: нет

ТЕСТИРОВАНИЕ (автоматический ввод):

· 1 этаж: "Дом с 1 этажом"

 
· 5 этажей: "Дом с 5 этажами"
· 23 этажа: "Дом с 23 этажами"
· 0 этажей: "Дом должен содержать >0 этажей"

ТЕСТИРОВАНИЕ (ручной ввод):
Входные параметры: 3 этажа
Результат: "Дом с 3 этажами"

Входные параметры: 21 этаж
Результат: "Дом с 21 этажом"



3. КАТЕГОРИЯ №3: Задача 4 - Классы Departament и Employee

ОПИСАНИЕ КЛАССА Departament:
Класс Departament представляет сущность "Отдел" в организации. Содержит информацию о названии отдела, сотрудниках и руководителе.

ПОЛЯ КЛАССА:

· private String name - название отдела
· private Employee manager - руководитель отдела
· private List<Employee> employees - список сотрудников отдела

КОНСТРУКТОРЫ:

Departament(String name)

· Описание: Конструктор с названием отдела. Инициализирует отдел с указанным именем.
· Параметры: name - название отдела

МЕТОДЫ ДОСТУПА (ГЕТТЕРЫ):

String getName()

· Описание: Возвращает название отдела.
· Параметры: нет

Employee getManager()

· Описание: Возвращает руководителя отдела.
· Параметры: нет

List<Employee> getEmployees()

· Описание: Возвращает список всех сотрудников отдела.
· Параметры: нет

МЕТОДЫ ИЗМЕНЕНИЯ (СЕТТЕРЫ):

void setManager(Employee manager)

· Описание: Устанавливает руководителя отдела.
· Параметры: manager - сотрудник-руководитель

void addEmployee(Employee employee)

· Описание: Добавляет сотрудника в отдел.
· Параметры: employee - добавляемый сотрудник



ОПИСАНИЕ КЛАССА Employee:
Класс Employee представляет сущность "Сотрудник" организации. Содержит информацию о сотруднике и его связи с отделом.

ПОЛЯ КЛАССА:

· private String name - имя сотрудника
· private Departament department - отдел сотрудника

КОНСТРУКТОРЫ:

Employee(String name, Departament department)

· Описание: Конструктор с параметрами. Создает сотрудника и автоматически добавляет его в отдел.
· Параметры: name - имя сотрудника, department - отдел сотрудника

МЕТОДЫ ДОСТУПА (ГЕТТЕРЫ):

String getName()

· Описание: Возвращает имя сотрудника.
· Параметры: нет

Departament getDepartment()

· Описание: Возвращает отдел сотрудника.
· Параметры: нет

МЕТОДЫ БИЗНЕС-ЛОГИКИ:

List<Employee> getAllDepartmentEmployees()

· Описание: Возвращает всех сотрудников отдела через ссылку на любого сотрудника этого отдела.
· Параметры: нет

МЕТОД ПРЕДСТАВЛЕНИЯ:

String toString()

· Описание: Возвращает строковое представление сотрудника с информацией об отделе и руководителе.
· Параметры: нет

ТЕСТИРОВАНИЕ (автоматический ввод):
Созданы сотрудники: Козлов, Петров, Сидоров в отделе IT
Назначен начальник: Козлов
Результат:

· Козлов: "Козлов работает в отделе IT, начальник которого Козлов"
· Петров: "Петров работает в отделе IT, начальник которого Козлов"
· Сидоров: "Сидоров работает в отделе IT, начальник которого Козлов"

ТЕСТИРОВАНИЕ (ручной ввод):
Создан отдел: "Финансы"
Созданы сотрудники: "Смирнов", "Петрова", "Васильев"
Назначен начальник: "Смирнов"
Результат корректно отображает информацию о сотрудниках и их начальнике


4. КАТЕГОРИЯ №4: Задача 4 - Получение всех сотрудников отдела

МЕТОДЫ ДЛЯ РАБОТЫ СО СПИСКОМ СОТРУДНИКОВ:

В КЛАССЕ Employee:

List<Employee> getAllDepartmentEmployees()

· Описание: Возвращает список всех сотрудников отдела через ссылку на любого сотрудника этого отдела. Использует делегирование к методу отдела.
· Параметры: нет

В КЛАССЕ Departament:

List<Employee> getEmployees()

· Описание: Возвращает список всех сотрудников отдела.
· Параметры: нет

void addEmployee(Employee employee)

· Описание: Добавляет сотрудника в список отдела.
· Параметры: employee - добавляемый сотрудник

ТЕСТИРОВАНИЕ (автоматический ввод):
Через Козлова: список сотрудников IT отдела (Козлов, Петров, Сидоров)
Через Петрова: тот же список сотрудников

ТЕСТИРОВАНИЕ (ручной ввод):
Отдел "Разработка", сотрудники: "Алексей", "Мария", "Дмитрий"
Получение списка через любого сотрудника возвращает полный список всех трех сотрудников



5. КАТЕГОРИЯ №5: Задача 5 - Альтернативный формат Name

МЕТОД ПРЕДСТАВЛЕНИЯ:

В КЛАССЕ Name:

String toStringNow()

· Описание: Возвращает альтернативное строковое представление объекта Name в формате "Имя Отчество Фамилия".

 
Если какие-то компоненты отсутствуют, они пропускаются.
· Параметры: нет

ТЕСТИРОВАНИЕ (автоматический ввод):

· Клеопатра: "Клеопатра"
· Пушкин Александр Сергеевич: "Александр Сергеевич Пушкин"
· Маяковский Владимир: "Владимир Маяковский"
· Христофор Бонифатьевич: "Христофор Бонифатьевич"

ТЕСТИРОВАНИЕ (ручной ввод):
Входные параметры: имя "Сергей", фамилия "Петров"
Результат: "Сергей Петров"



6. КАТЕГОРИЯ №6: Задача 5 - Класс Fraction

ОПИСАНИЕ КЛАССА:
Класс Fraction представляет сущность "Дробь" с возможностью выполнения арифметических операций. Обеспечивает автоматическое сокращение дробей и контроль за корректностью операций.

ПОЛЯ КЛАССА:

· private int numerator - числитель дроби
· private int denominator - знаменатель дроби

КОНСТРУКТОРЫ:

Fraction(int numerator, int denominator)

· Описание: Конструктор с параметрами числителя и знаменателя. Создает дробь с автоматическим сокращением.
· Параметры: numerator - числитель, denominator - знаменатель

МЕТОДЫ ДОСТУПА (ГЕТТЕРЫ):

int getNumerator()

· Описание: Возвращает числитель дроби.
· Параметры: нет

int getDenominator()

· Описание: Возвращает знаменатель дроби.
· Параметры: нет

МЕТОДЫ ИЗМЕНЕНИЯ (СЕТТЕРЫ):

void setNumerator(int numerator)

· Описание: Устанавливает числитель дроби.
· Параметры: numerator - новый числитель

void setDenominator(int denominator)

· Описание: Устанавливает знаменатель дроби. Включает проверку на ноль.
· Параметры: denominator - новый знаменатель

МЕТОДЫ ЛОГИКИ:

Fraction add(Fraction other)

· Описание: Выполняет сложение двух дробей.
· Параметры: other - дробь для сложения

Fraction subtract(Fraction other)

· Описание: Выполняет вычитание двух дробей.
· Параметры: other - дробь для вычитания

Fraction multiply(Fraction other)

· Описание: Выполняет умножение двух дробей.
· Параметры: other - дробь для умножения

Fraction divide(Fraction other)

· Описание: Выполняет деление двух дробей. Включает проверку деления на ноль.
· Параметры: other - дробь для деления

МЕТОД ПРЕДСТАВЛЕНИЯ:

String toString()

· Описание: Возвращает строковое представление дроби в формате "числитель/знаменатель".
· Параметры: нет

ТЕСТИРОВАНИЕ (автоматический ввод):
Дроби: 1/3, 2/3, 3/4, 5/6
Операции:

· 1/3 + 2/3 = 1
· 3/4 - 5/6 = -1/12
· 1/3 * 2/3 = 2/9
· 3/4 ÷ 5/6 = 9/10

ТЕСТИРОВАНИЕ (ручной ввод):
Входные параметры: дробь 2/3 и дробь 1/4
Результаты:

· 2/3 + 1/4 = 11/12
· 2/3 - 1/4 = 5/12
· 2/3 × 1/4 = 1/6
· 2/3 ÷ 1/4 = 8/3



ВСПОМОГАТЕЛЬНЫЕ МЕТОДЫ ВАЛИДАЦИИ

· showMainMenu() - главное меню программы
· autoInputMenu() - меню автоматического ввода
· manualInputMenu() - меню ручного ввода
· getValidNameInput() - валидация ввода имен
· getValidTextInput() - валидация ввода текста
· getIntInput() - валидация целых чисел
· getPositiveIntInput() - валидация положительных чисел
· getNonZeroIntInput() - валидация ненулевых чисел

ОСОБЕННОСТИ РЕАЛИЗАЦИИ

1. Все классы инкапсулируют данные с использованием private полей и public get/set методов
2. Реализована двусторонняя связь между Employee и Departament
3. Класс Departament автоматически добавляет сотрудников в список при создании
4. Класс Fraction автоматически сокращает дроби и обеспечивает положительный знаменатель
5. Класс House корректно склоняет слово "этаж" в зависимости от числа
6. Реализована обработка некорректного ввода во всех методах валидации

ЗАКЛЮЧЕНИЕ
Все 6 задач успешно реализованы и протестированы. Программа демонстрирует принципы ООП: инкапсуляцию, перегрузку методов и конструкторов. Реализована удобная система меню с защитой от некорректного ввода. Каждый класс решает конкретную задачу из лабораторной работы №2 и корректно обрабатывает различные сценарии использования. Все методы (конструкторы, геттеры, сеттеры, toString) документированы и протестированы.
